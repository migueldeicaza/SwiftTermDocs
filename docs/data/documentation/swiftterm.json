{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For convenience, the documentation on this site merges both the core, AppKit and"},{"type":"text","text":" "},{"type":"text","text":"UIKit APIs."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The SwiftTerm repository contains both the core terminal emulator, as well as"},{"type":"text","text":" "},{"type":"text","text":"macOS and iOS front-ends as well as samples for both platforms.   The TermKit"},{"type":"text","text":" "},{"type":"text","text":"module contains a sample showing how to embed the terminal application into"},{"type":"text","text":" "},{"type":"text","text":"a text-mode framework. It has been used in several commercially available"},{"type":"text","text":" "},{"type":"text","text":"SSH clients, including Secure Shellfish, La Terminal and CodeEdit"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample Mac app has much of the functionality of MacOS’ Terminal.app, but without the configuration UI."}]},{"anchor":"Features","level":2,"type":"heading","text":"Features"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Pretty decent terminal emulation, on or better than XtermSharp and xterm.js"},{"type":"text","text":" "},{"type":"text","text":"(and more comprehensive in many ways)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unicode rendering (including Emoji, and combining characters and emoji)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reusable and pluggable engine allows multiple user interfaces to be built on"},{"type":"text","text":" "},{"type":"text","text":"top of it."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Selection engine (with macOS support in the view)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Supports colors (ANSI, 256, TrueColor)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Supports mouse events"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Supports terminal resizing operations (controlled by remote host, or locally)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/gist.github.com\/egmontkob\/eb114294efbcd5adb1944c9f3cb5feda"},{"type":"text","text":" in terminal output"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"AppKit, UIKit front-ends;  ncruses front-end "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/migueldeicaza\/TermKit"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Local process and SSH connection support (some assembly required for the last"},{"type":"text","text":" "},{"type":"text","text":"one)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Proper CoreText rendering can munch through the hardened Unicode test suites."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sixel graphics (Use img2sixel to test)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"iTerm2-style graphic rendering (Use imgcat to test)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Fuzzed and abused"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Seems pretty fast to me"}]}]}]},{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftTerm uses the Swift Package Manager for its build, and you can"},{"type":"text","text":" "},{"type":"text","text":"add the library to your project by using the url for this project or a"},{"type":"text","text":" "},{"type":"text","text":"fork of it."}]},{"anchor":"MacOS-NSView","level":2,"type":"heading","text":"MacOS NSView"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The macOS AppKit NSView implementation "},{"type":"reference","isActive":true,"identifier":"https:\/\/migueldeicaza.github.io\/SwiftTermDocs\/documentation\/swiftterm\/terminalview"},{"type":"text","text":" is a reusable"},{"type":"text","text":" "},{"type":"text","text":"NSView control that can be connected to any source by implementing the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/migueldeicaza.github.io\/SwiftTermDocs\/documentation\/swiftterm\/terminalviewdelegate"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"I anticipate that a common scenario will be"},{"type":"text","text":" "},{"type":"text","text":"to host a local Unix command, so I have included"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/migueldeicaza.github.io\/SwiftTermDocs\/documentation\/swiftterm\/localprocessterminalview"},{"type":"text","text":" "},{"type":"text","text":"which is an implementation that connects"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"TerminalView"},{"type":"text","text":" to a Unix pseudo-terminal and runs a command there."}]},{"anchor":"iOS-UIView","level":2,"type":"heading","text":"iOS UIView"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is an equivalent UIKit UIView implementation for"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"TerminalView"}],"isActive":true,"type":"reference","identifier":"https:\/\/migueldeicaza.github.io\/SwiftTermDocs\/documentation\/swiftterm\/terminalview","overridingTitle":"TerminalView"},{"type":"text","text":" "},{"type":"text","text":"which like its NSView companion is an embeddable and reusable view"},{"type":"text","text":" "},{"type":"text","text":"that can be connected to your application by implementing the same"},{"type":"text","text":" "},{"type":"text","text":"TerminalViewDelegate.  Unlike the NSView case running on a Mac, where"},{"type":"text","text":" "},{"type":"text","text":"a common scenario will be to run local commands, given that iOS does"},{"type":"text","text":" "},{"type":"text","text":"not offer access to processes, the most common scenario will be to"},{"type":"text","text":" "},{"type":"text","text":"wire up this terminal to a remote host.  And the safest way of"},{"type":"text","text":" "},{"type":"text","text":"connecting to a remote system is with SSH."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftterm"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"SwiftTerm is a VT100\/Xterm terminal emulator library for Swift applications that"},{"type":"text","text":" "},{"type":"text","text":"can be embedded into macOS, iOS applications, text-based, headless applications"},{"type":"text","text":" "},{"type":"text","text":"or other custom scenarios."}],"kind":"symbol","metadata":{"roleHeading":"Framework","externalID":"SwiftTerm","title":"SwiftTerm","symbolKind":"module","role":"collection","modules":[{"name":"SwiftTerm"}]},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Classes","identifiers":["doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/Buffer","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/BufferLine","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/Color","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/EscapeSequenceParser","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/HeadlessTerminal","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/ImageCell","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/LocalProcess","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/LocalProcessTerminalView","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/PseudoTerminalHelpers","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/Terminal","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalAccessory","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalDebugView","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalView"]},{"title":"Protocols","identifiers":["doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/LocalProcessDelegate","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/LocalProcessTerminalViewDelegate","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalDelegate","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalImage","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalViewDelegate"]},{"title":"Structures","identifiers":["doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/Attribute","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/CharData","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/CharacterStyle","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/EscapeSequences","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/Position","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalOptions","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TinyAtom"]},{"title":"Type Aliases","identifiers":["doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TTImage"]},{"title":"Enumerations","identifiers":["doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/CursorStyle","doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/ImageSizeRequest"]}],"references":{"doc://SwiftTerm/documentation/SwiftTerm/LocalProcessDelegate":{"role":"symbol","title":"LocalProcessDelegate","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LocalProcessDelegate"}],"abstract":[{"type":"text","text":"Delegate that is invoked by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/LocalProcess"},{"type":"text","text":" class in response to various"},{"type":"text","text":" "},{"type":"text","text":"process-related events."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/LocalProcessDelegate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LocalProcessDelegate"}],"url":"\/documentation\/swiftterm\/localprocessdelegate"},"doc://SwiftTerm/documentation/SwiftTerm/ImageSizeRequest":{"role":"symbol","title":"ImageSizeRequest","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ImageSizeRequest"}],"abstract":[{"type":"text","text":"Enumeration passed to the TerminalDelegate.createImage to configure"},{"type":"text","text":" "},{"type":"text","text":"the desired values for width and height."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/ImageSizeRequest","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ImageSizeRequest"}],"url":"\/documentation\/swiftterm\/imagesizerequest"},"doc://SwiftTerm/documentation/SwiftTerm/Buffer":{"role":"symbol","title":"Buffer","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Buffer"}],"abstract":[{"type":"text","text":"The buffer represents the contents shown to the user."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/Buffer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Buffer"}],"url":"\/documentation\/swiftterm\/buffer"},"doc://SwiftTerm/documentation/SwiftTerm/TTImage":{"role":"symbol","title":"TTImage","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"TTImage"}],"abstract":[],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TTImage","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TTImage"}],"url":"\/documentation\/swiftterm\/ttimage"},"doc://SwiftTerm/documentation/SwiftTerm/Position":{"role":"symbol","title":"Position","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Position"}],"abstract":[{"type":"text","text":"Represents a column and row"}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/Position","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Position"}],"url":"\/documentation\/swiftterm\/position"},"doc://SwiftTerm/documentation/SwiftTerm/LocalProcessTerminalView":{"role":"symbol","title":"LocalProcessTerminalView","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LocalProcessTerminalView"}],"abstract":[{"type":"codeVoice","code":"LocalProcessTerminalView"},{"type":"text","text":" is an AppKit NSView that can be used to host a local process"},{"type":"text","text":" "},{"type":"text","text":"the process is launched inside a pseudo-terminal."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/LocalProcessTerminalView","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LocalProcessTerminalView"}],"url":"\/documentation\/swiftterm\/localprocessterminalview"},"doc://SwiftTerm/documentation/SwiftTerm/Attribute":{"role":"symbol","title":"Attribute","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Attribute"}],"abstract":[{"type":"text","text":"Attribute contains the foreground and background color information for the invidual"},{"type":"text","text":" "},{"type":"text","text":"cells, as well as the character style of the cell (bold, underline, inverse) that the character"},{"type":"text","text":" "},{"type":"text","text":"should be drawn as."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/Attribute","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Attribute"}],"url":"\/documentation\/swiftterm\/attribute"},"doc://SwiftTerm/documentation/SwiftTerm/TerminalOptions":{"role":"symbol","title":"TerminalOptions","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TerminalOptions"}],"abstract":[{"type":"text","text":"Configuration options for the terminal at startup, these values are only read at startup"}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalOptions","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TerminalOptions"}],"url":"\/documentation\/swiftterm\/terminaloptions"},"doc://SwiftTerm/documentation/SwiftTerm/ImageCell":{"role":"symbol","title":"ImageCell","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ImageCell"}],"abstract":[{"type":"text","text":"Represents an image that can be attached to a"}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/ImageCell","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ImageCell"}],"url":"\/documentation\/swiftterm\/imagecell"},"doc://SwiftTerm/documentation/SwiftTerm/CharacterStyle":{"role":"symbol","title":"CharacterStyle","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CharacterStyle"}],"abstract":[{"type":"text","text":"This option set describes the character style for a cell, this includes"},{"type":"text","text":" "},{"type":"text","text":"information about the font to use as well as decorations on the text"}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/CharacterStyle","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CharacterStyle"}],"url":"\/documentation\/swiftterm\/characterstyle"},"doc://SwiftTerm/documentation/SwiftTerm/PseudoTerminalHelpers":{"role":"symbol","title":"PseudoTerminalHelpers","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PseudoTerminalHelpers"}],"abstract":[{"type":"text","text":"APIs to assist in controlling a Unix pseudo-terminal from Swift."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/PseudoTerminalHelpers","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PseudoTerminalHelpers"}],"url":"\/documentation\/swiftterm\/pseudoterminalhelpers"},"doc://SwiftTerm/documentation/SwiftTerm/BufferLine":{"role":"symbol","title":"BufferLine","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BufferLine"}],"abstract":[{"type":"text","text":"BufferLines represents a single line of text displayed on the terminal"}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/BufferLine","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BufferLine"}],"url":"\/documentation\/swiftterm\/bufferline"},"doc://SwiftTerm/documentation/SwiftTerm/TerminalDebugView":{"role":"symbol","title":"TerminalDebugView","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TerminalDebugView"}],"abstract":[],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalDebugView","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TerminalDebugView"}],"url":"\/documentation\/swiftterm\/terminaldebugview"},"doc://SwiftTerm/documentation/SwiftTerm/CursorStyle":{"role":"symbol","title":"CursorStyle","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CursorStyle"}],"abstract":[{"type":"text","text":"Configuration option for the desired cursor style, this style can also be overwritten by the application"},{"type":"text","text":" "},{"type":"text","text":"inside the terminal, and the UI control can choose to honor this request."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/CursorStyle","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CursorStyle"}],"url":"\/documentation\/swiftterm\/cursorstyle"},"doc://SwiftTerm/documentation/SwiftTerm/TerminalAccessory":{"role":"symbol","title":"TerminalAccessory","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TerminalAccessory"}],"abstract":[{"type":"text","text":"This class provides an input accessory for the terminal on iOS, you can access this via the "},{"type":"codeVoice","code":"inputAccessoryView"},{"type":"text","text":" "},{"type":"text","text":"property in the "},{"type":"codeVoice","code":"TerminalView"},{"type":"text","text":" and casting the result to "},{"type":"codeVoice","code":"TerminalAccessory"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalAccessory","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TerminalAccessory"}],"url":"\/documentation\/swiftterm\/terminalaccessory"},"doc://SwiftTerm/documentation/SwiftTerm/TerminalViewDelegate":{"role":"symbol","title":"TerminalViewDelegate","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TerminalViewDelegate"}],"abstract":[{"type":"text","text":"Delegate used by "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalView"},{"type":"text","text":" to notify the user of events happening"},{"type":"text","text":" "},{"type":"text","text":"in it."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalViewDelegate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TerminalViewDelegate"}],"url":"\/documentation\/swiftterm\/terminalviewdelegate"},"doc://SwiftTerm/documentation/SwiftTerm/Terminal":{"role":"symbol","title":"Terminal","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Terminal"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Terminal"},{"type":"text","text":" class provides the terminal emulation engine, and can be used to feed data to the"},{"type":"text","text":" "},{"type":"text","text":"terminal emulator.   Typically users will intereact with a higher-level implementation that provides a"},{"type":"text","text":" "},{"type":"text","text":"UI toolkit-specific rendering and connects the input to the UI toolkit."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/Terminal","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Terminal"}],"url":"\/documentation\/swiftterm\/terminal"},"doc://SwiftTerm/documentation/SwiftTerm":{"role":"collection","title":"SwiftTerm","abstract":[{"type":"text","text":"SwiftTerm is a VT100\/Xterm terminal emulator library for Swift applications that"},{"type":"text","text":" "},{"type":"text","text":"can be embedded into macOS, iOS applications, text-based, headless applications"},{"type":"text","text":" "},{"type":"text","text":"or other custom scenarios."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm","kind":"symbol","type":"topic","url":"\/documentation\/swiftterm"},"doc://SwiftTerm/documentation/SwiftTerm/EscapeSequences":{"role":"symbol","title":"EscapeSequences","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EscapeSequences"}],"abstract":[{"type":"text","text":"Some common escape sequence responses that a terminal emulator might use"},{"type":"text","text":" "},{"type":"text","text":"Some sequence names have a “Normal” or “App” suffix, this is used to differentiate"},{"type":"text","text":" "},{"type":"text","text":"the escape sequence that should be sent in the default mode, vs the application-cursor mode"},{"type":"text","text":" "},{"type":"text","text":"(controlled by "},{"type":"codeVoice","code":"Terminal.applicationCursor"}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/EscapeSequences","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EscapeSequences"}],"url":"\/documentation\/swiftterm\/escapesequences"},"https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda":{"title":"Hyperlinks","titleInlineContent":[{"type":"text","text":"Hyperlinks"}],"type":"link","identifier":"https:\/\/gist.github.com\/egmontkob\/eb114294efbcd5adb1944c9f3cb5feda","url":"https:\/\/gist.github.com\/egmontkob\/eb114294efbcd5adb1944c9f3cb5feda"},"doc://SwiftTerm/documentation/SwiftTerm/TerminalView":{"role":"symbol","title":"TerminalView","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TerminalView"}],"abstract":[{"type":"text","text":"TerminalView provides an AppKit front-end to the "},{"type":"codeVoice","code":"Terminal"},{"type":"text","text":" termininal emulator."},{"type":"text","text":" "},{"type":"text","text":"It is up to a subclass to either wire the terminal emulator to a remote terminal"},{"type":"text","text":" "},{"type":"text","text":"via some socket, to an application that wants to run with terminal emulation, or"},{"type":"text","text":" "},{"type":"text","text":"wiring this up to a pseudo-terminal."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalView","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TerminalView"}],"url":"\/documentation\/swiftterm\/terminalview"},"doc://SwiftTerm/documentation/SwiftTerm/LocalProcessTerminalViewDelegate":{"role":"symbol","title":"LocalProcessTerminalViewDelegate","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LocalProcessTerminalViewDelegate"}],"abstract":[{"type":"text","text":"Delegate for the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/LocalProcessTerminalView"},{"type":"text","text":" class that is used to"},{"type":"text","text":" "},{"type":"text","text":"notify the user of process-related changes."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/LocalProcessTerminalViewDelegate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LocalProcessTerminalViewDelegate"}],"url":"\/documentation\/swiftterm\/localprocessterminalviewdelegate"},"doc://SwiftTerm/documentation/SwiftTerm/CharData":{"role":"symbol","title":"CharData","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CharData"}],"abstract":[{"type":"text","text":"Stores a cell with both the character being displayed as well as the color attribute."},{"type":"text","text":" "},{"type":"text","text":"This uses an Int32 to store the value, if the value can not be encoded as a single Unicode.Scalar,"},{"type":"text","text":" "},{"type":"text","text":"then an index is stored that is looked up in parallel, so that full grapheme clusters can be tracked."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/CharData","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CharData"}],"url":"\/documentation\/swiftterm\/chardata"},"doc://SwiftTerm/documentation/SwiftTerm/TerminalImage":{"role":"symbol","title":"TerminalImage","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TerminalImage"}],"abstract":[],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalImage","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TerminalImage"}],"url":"\/documentation\/swiftterm\/terminalimage"},"doc://SwiftTerm/documentation/SwiftTerm/LocalProcess":{"role":"symbol","title":"LocalProcess","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LocalProcess"}],"abstract":[{"type":"text","text":"This class provides the capabilities to launch a local Unix process, and connect it to a "},{"type":"codeVoice","code":"Terminal"},{"type":"text","text":" "},{"type":"text","text":"class or subclass."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/LocalProcess","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LocalProcess"}],"url":"\/documentation\/swiftterm\/localprocess"},"doc://SwiftTerm/documentation/SwiftTerm/EscapeSequenceParser":{"role":"symbol","title":"EscapeSequenceParser","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EscapeSequenceParser"}],"abstract":[{"type":"text","text":"The engine that drives the parsing of the data stream for the terminal."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/EscapeSequenceParser","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EscapeSequenceParser"}],"url":"\/documentation\/swiftterm\/escapesequenceparser"},"https://migueldeicaza.github.io/SwiftTermDocs/documentation/swiftterm/localprocessterminalview":{"title":"LocalProcessTerminalView","titleInlineContent":[{"type":"codeVoice","code":"LocalProcessTerminalView"}],"type":"link","identifier":"https:\/\/migueldeicaza.github.io\/SwiftTermDocs\/documentation\/swiftterm\/localprocessterminalview","url":"https:\/\/migueldeicaza.github.io\/SwiftTermDocs\/documentation\/swiftterm\/localprocessterminalview"},"doc://SwiftTerm/documentation/SwiftTerm/HeadlessTerminal":{"role":"symbol","title":"HeadlessTerminal","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HeadlessTerminal"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"HeadlessTerminal"},{"type":"text","text":" provides a terminal emulator that runs a local process, but the output does not go"},{"type":"text","text":" "},{"type":"text","text":"anywhere.   You can use this to script applications and screen scrape the output for example, by accessing the"},{"type":"text","text":" "},{"type":"codeVoice","code":"terminal"},{"type":"text","text":" from this class."}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/HeadlessTerminal","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HeadlessTerminal"}],"url":"\/documentation\/swiftterm\/headlessterminal"},"https://migueldeicaza.github.io/SwiftTermDocs/documentation/swiftterm/terminalview":{"title":"TerminalView","titleInlineContent":[{"type":"codeVoice","code":"TerminalView"}],"type":"link","identifier":"https:\/\/migueldeicaza.github.io\/SwiftTermDocs\/documentation\/swiftterm\/terminalview","url":"https:\/\/migueldeicaza.github.io\/SwiftTermDocs\/documentation\/swiftterm\/terminalview"},"doc://SwiftTerm/documentation/SwiftTerm/TerminalDelegate":{"role":"symbol","title":"TerminalDelegate","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TerminalDelegate"}],"abstract":[{"type":"text","text":"The terminal delegate is a protocol that must be implemented by a class"},{"type":"text","text":" "},{"type":"text","text":"that would provide a user interface for the terminal, and it is used by the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Terminal"},{"type":"text","text":" to notify of important changes on the underlying terminal"}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TerminalDelegate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TerminalDelegate"}],"url":"\/documentation\/swiftterm\/terminaldelegate"},"https://github.com/migueldeicaza/TermKit":{"title":"provided separately","titleInlineContent":[{"type":"text","text":"provided separately"}],"type":"link","identifier":"https:\/\/github.com\/migueldeicaza\/TermKit","url":"https:\/\/github.com\/migueldeicaza\/TermKit"},"doc://SwiftTerm/documentation/SwiftTerm/TinyAtom":{"role":"symbol","title":"TinyAtom","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TinyAtom"}],"abstract":[{"type":"text","text":"TinyAtoms are 16-bit values that can be used to represent a string as a number"},{"type":"text","text":" "},{"type":"text","text":"you create them by calling TinyAtom.lookup (Any) and retrieve the"},{"type":"text","text":" "},{"type":"text","text":"value using the "},{"type":"codeVoice","code":"target"},{"type":"text","text":" property.   They are used to store the urls and any"},{"type":"text","text":" "},{"type":"text","text":"additional parameter information in the OSC 8 scenario or to store binary blobs"},{"type":"text","text":" "},{"type":"text","text":"for images"}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/TinyAtom","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TinyAtom"}],"url":"\/documentation\/swiftterm\/tinyatom"},"doc://SwiftTerm/documentation/SwiftTerm/Color":{"role":"symbol","title":"Color","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Color"}],"abstract":[{"type":"text","text":"This represents the colors used in SwiftTerm, in particular for cells and backgrounds"},{"type":"text","text":" "},{"type":"text","text":"in 16-bit RGB mode"}],"identifier":"doc:\/\/SwiftTerm\/documentation\/SwiftTerm\/Color","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Color"}],"url":"\/documentation\/swiftterm\/color"},"https://migueldeicaza.github.io/SwiftTermDocs/documentation/swiftterm/terminalviewdelegate":{"title":"TerminalViewDelegate","titleInlineContent":[{"type":"codeVoice","code":"TerminalViewDelegate"}],"type":"link","identifier":"https:\/\/migueldeicaza.github.io\/SwiftTermDocs\/documentation\/swiftterm\/terminalviewdelegate","url":"https:\/\/migueldeicaza.github.io\/SwiftTermDocs\/documentation\/swiftterm\/terminalviewdelegate"}}}